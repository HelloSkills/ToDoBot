// –°–æ–µ–¥–∏–Ω—è–µ–º –±–æ—Ç–∞
require('dotenv').config();
const { Bot, GrammyError, HttpError, InlineKeyboard, Keyboard } = require('grammy');
const { session } = require("grammy");

const cron = require('node-cron');
const axios = require('axios');

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ë–î
const sqlite3 = require('sqlite3').verbose();
const sqlite = require('sqlite'); // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º sqlite –ø–æ—Å–ª–µ sqlite3

// –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–æ—Ç–∞
const bot = new Bot(process.env.BOT_API_KEY);


const { hydrate } = require('@grammyjs/hydrate'); // –ü–æ–¥–∫–ª—é—á–∞–µ–º hydrate

bot.use(hydrate()); // –ü—Ä–∏–º–µ–Ω—è–µ–º hydrate middleware
bot.use(session({ initial: () => ({ creatingTask: false }) })); // –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–µ—Å—Å–∏–∏

// Logs

const fs = require('fs');
const path = require('path');

const Logs = path.join(__dirname, 'Logs');

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞

bot.start();

// –ü–æ–¥–∫–ª—é—á–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö SQLite
async function setupDatabase() {
	const db = await sqlite.open({
		filename: './todolist.db',
		driver: sqlite3.Database,
	});

	// –ù—É–∂–µ–Ω BIGINT –≤ user_id

	await db.run(`
        CREATE TABLE IF NOT EXISTS todos (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            task TEXT,
            priority INTEGER DEFAULT 1
        )
    `);

	return db;
}



const dbPromise = setupDatabase();


// Start Bot

bot.api.setMyCommands([
	{
		command: 'start',
		description: '–°–ø–∏—Å–æ–∫ –¥–µ–ª',
	}
])

// Command Start

bot.command('start', async (ctx) => {
	await ctx.react("‚ù§")

	console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.username} –∏ ID: ${ctx.from.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π start`);
	await ctx.reply(`*–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É*`, {
		parse_mode: 'MarkdownV2',
		reply_markup: menuKeyboard,
	});
});

// Menu Bot
const menuKeyboard = new InlineKeyboard()
	.text('–û—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫', 'todolist').row()
	.text('–°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å', 'create')
	.text('–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å', 'update').row()
	.text('–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å', 'delete')
	.text('–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç', 'priority').row()

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á —Å –∫–Ω–æ–ø–∫–æ–π "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"
const taskMenuKeyboard = new InlineKeyboard()
	.text('–û—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫', 'todolist').row()
	.text('–°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å', 'create')
	.text('–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å', 'update').row()
	.text('–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å', 'delete')
	.text('–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç', 'priority').row()
	.text('üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', 'main_menu');

// Callback –Ω–∞ todolist

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫"
bot.callbackQuery('todolist', async (ctx) => {
	const db = await dbPromise;
	const tasks = await db.all('SELECT * FROM todos WHERE user_id = ? ORDER BY priority DESC', [ctx.from.id]);

	if (tasks.length === 0) {
		await ctx.editMessageText('–í–∞—à —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç.', {
			reply_markup: { remove_keyboard: true }
		});
	} else {
		let message = '–í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n';
		const taskKeyboard = new InlineKeyboard();

		tasks.forEach((task, index) => {
			taskKeyboard.text(task.task, `task_${task.id}`).row();
		});

		taskKeyboard.row();  // –†–∞–∑–¥–µ–ª—è–µ–º —Ä—è–¥ –∑–∞–¥–∞—á –∏ –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
		taskKeyboard.text('üÜï', 'create');
		taskKeyboard.row();  // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"
		taskKeyboard.text('‚Ü©Ô∏è', 'main_menu');

		await ctx.editMessageText(message, {
			reply_markup: taskKeyboard,
		});
	}
	console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.username} –∏ ID: ${ctx.from.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á`);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"
bot.callbackQuery('main_menu', async (ctx) => {
	await ctx.editMessageText('*–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É*', {
		parse_mode: 'MarkdownV2',
		reply_markup: menuKeyboard
	});

	console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.username} –∏ ID: ${ctx.from.id} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.`);
});


// Callback create
bot.callbackQuery('create', async (ctx) => {
	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
	ctx.session.creatingTask = true;
	await ctx.reply("–ù–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç –≤–∞—à—É –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É");

	console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.username} –∏ ID: ${ctx.from.id} —Ö–æ—á–µ—Ç —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å.`);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
bot.on('message:text', async (ctx) => {
	const db = await dbPromise;
	const taskText = ctx.message.text;

	if (ctx.session.creatingTask) {
		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
		await db.run('INSERT INTO todos (user_id, task) VALUES (?, ?)', [ctx.from.id, taskText]);

		await ctx.reply('–ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ –¥–µ–ª.');
		console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.username} –∏ ID: ${ctx.from.id} –¥–æ–±–∞–≤–∏–ª –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å: ${taskText}`);

		// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
		ctx.session.creatingTask = false;

	} else if (ctx.session.updatingTaskId) {
		// –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
		await db.run('UPDATE todos SET task = ? WHERE id = ?', [taskText, ctx.session.updatingTaskId]);

		await ctx.reply('–ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.');
		console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.username} –∏ ID: ${ctx.from.id} –æ–±–Ω–æ–≤–∏–ª –∑–∞–¥–∞—á—É ID: ${ctx.session.updatingTaskId} –Ω–∞: ${taskText}`);

		// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
		ctx.session.updatingTaskId = null;
	}
});



// Callback update
bot.callbackQuery('update', async (ctx) => {
	const db = await dbPromise;
	const tasks = await db.all('SELECT * FROM todos WHERE user_id = ? ORDER BY priority DESC', [ctx.from.id]);

	if (tasks.length === 0) {
		await ctx.reply('–í–∞—à —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç.');
	} else {
		let message = '–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:\n';
		const updateKeyboard = new InlineKeyboard();
		tasks.forEach((task, index) => {
			message += `${index + 1}. ${task.task}\n`;
			updateKeyboard.text(task.task, `update_${task.id}`).row();  // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏
		});
		await ctx.reply(message, {
			reply_markup: updateKeyboard,
		});
	}
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–¥–∞—á—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
bot.callbackQuery(/^update_\d+$/, async (ctx) => {
	const taskId = ctx.callbackQuery.data.split('_')[1]; // –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–¥–∞—á–∏
	ctx.session.updatingTaskId = taskId;
	ctx.session.creatingTask = false; // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
	await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–¥–∞—á–∏:');
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
bot.on('message:text', async (ctx) => {
	if (ctx.session.updatingTaskId) {
		const db = await dbPromise;
		const taskText = ctx.message.text;

		// –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
		await db.run('UPDATE todos SET task = ? WHERE id = ?', [taskText, ctx.session.updatingTaskId]);

		await ctx.reply('–ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.');
		console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.username} –∏ ID: ${ctx.from.id} –æ–±–Ω–æ–≤–∏–ª –∑–∞–¥–∞—á—É ID: ${ctx.session.updatingTaskId} –Ω–∞: ${taskText}`);

		// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
		ctx.session.updatingTaskId = null;
	}
});


// Callback delete - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
bot.callbackQuery('delete', async (ctx) => {
	const db = await dbPromise;
	const tasks = await db.all('SELECT * FROM todos WHERE user_id = ? ORDER BY priority DESC', [ctx.from.id]);

	if (tasks.length === 0) {
		await ctx.reply('–í–∞—à —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç.');
	} else {
		let message = '–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n';
		const deleteKeyboard = new InlineKeyboard();
		tasks.forEach((task, index) => {
			message += `${index + 1}. ${task.task}\n`;
			deleteKeyboard.text(`–£–¥–∞–ª–∏—Ç—å: ${task.task}`, `delete_${task.id}`).row();  // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏
		});
		await ctx.reply(message, {
			reply_markup: deleteKeyboard,
		});
	}
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
bot.callbackQuery(/^delete_\d+$/, async (ctx) => {
	const taskId = ctx.callbackQuery.data.split('_')[1]; // –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–¥–∞—á–∏
	const db = await dbPromise;

	// –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	await db.run('DELETE FROM todos WHERE id = ?', [taskId]);

	await ctx.reply('–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞.');
	console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.username} –∏ ID: ${ctx.from.id} —É–¥–∞–ª–∏–ª –∑–∞–¥–∞—á—É ID: ${taskId}`);

	// –í—ã–≤–æ–¥–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
	const tasks = await db.all('SELECT * FROM todos WHERE user_id = ? ORDER BY priority DESC', [ctx.from.id]);
	let message = '–í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n';
	if (tasks.length === 0) {
		message += '–í–∞—à —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç.';
	} else {
		tasks.forEach((task, index) => {
			message += `${index + 1}. ${task.task}\n`;
		});
	}

	await ctx.reply(message);
});



// Callback priority
bot.callbackQuery('priority', async (ctx) => {
	const updatedKeyboard = new InlineKeyboard()
		.text('–û—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫', 'todolist').row()
		.text('–°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å', 'create')
		.text('–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å', 'update').row()
		.text('–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å', 'delete')
		.text('–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç', 'priority').row()

	await ctx.editMessageReplyMarkup({
		reply_markup: updatedKeyboard,
	});

	console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.username} –∏ ID: ${ctx.from.id} —Ö–æ—á–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ`);
})














// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫

bot.catch((err) => {
	const ctx = err.ctx;
	console.log(`Error while handling update ${ctx.update.update_id}:`);
	const e = err.error;

	if (e instanceof GrammyError) {
		console.error("Error in request:", e.description)
	} else if (e instanceof HttpError) {
		console.error("Could not contact Telegram", e);
	} else {
		console.error("Unknow error", e);
	}
});
